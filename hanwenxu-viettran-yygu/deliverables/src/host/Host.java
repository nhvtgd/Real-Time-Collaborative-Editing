package host;

import java.io.IOException;
import java.util.NoSuchElementException;
import java.util.Scanner;

import document.CollabClient;
import document.CollabServer;


/**
 * 
 * The main class that would be run to start the CollabEdit document. It takes in user inputs that 
 * would determine whether or not to launch a server or a client. It would then 
 * start the appropriate GUI from the IP address and port number that is provided.
 * 
 * Thread safety: Each instance of the client or server that will be generated by the host
 * will be on a separate thread. The only common data structures that these threads 
 * share will be done through the GUI and operational transform algorithm, which 
 * is also threadsafe by design.
 * 
 * Rep invariant: type, port, username are not null
 *
 */
public class Host {
    
    // The IP address to connect to
    private String userName;
    // Port number
    public final int port;
    // Server or client
    private final String type;
    
    /**
     * Constructor for the Host class
     * @param type - whether it is a server or client
     * @param IP - the ip address
     * @param port - the port number
     */
    public Host(String type, String IP, int port) {
        this.type = type;
        this.port = port;
        this.userName = IP;
    }
    
    static Host host;
    
    /**
     * Calls the corresponding constructor based on whether or not the user wants to 
     * start up a server or client. Passes all the implementation to the Collab class.
     */
    public void start() {
        
        if (type.toLowerCase().equals("server")) {
            System.out.println("Starting server");
            try {
                
                CollabServer userServer = new CollabServer(userName, port);
                userServer.serve();
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
        else {
            System.out.println("Starting client");
            try {
                CollabClient userClient = new CollabClient(userName, port);
                userClient.connect();
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
    }
    
    
    /**
     * Creates a new instance of the Host after parsing the arguments, and run the host on a separate thread.
     * @param args that specifies whether we want to run a server or client, and the IP Address and port number 
     * that we want to connect to
     * @throws IOException
     * @throws IllegalArgumentException if argument is illegal
     */
    public static void main(String[] args) throws IOException {
        System.out.println("usage: (client | server) localhost [Port]");
        Scanner in = new Scanner(System.in);
        while (true) {
            try {
                String input = in.nextLine();
                args = input.split(" ");
            }
            catch (NoSuchElementException e) {
                System.exit(0);
            }
            

            try {
                
                int portNo = 4444;
                
                if (args.length != 1 && args.length != 3) {
                    throw new IllegalArgumentException();
                }
                if (!args[0].toLowerCase().equals("client") && !args[0].toLowerCase().equals("server")) {
                    throw new IllegalArgumentException();
                }
                
                
                if (args.length == 1) {
                    host = new Host(args[0], "127.0.0.1", portNo);
                    Thread thread = new Thread(){
                        public void run(){
                            host.start();
                        }
                      };
                     
                      thread.start();
                }
                else if (args.length == 3) {
                    
                    try {
                        portNo = Integer.parseInt(args[2]);
                        
                    }
                    catch (NumberFormatException e) {
                        System.out.println("You must enter a number under port");
                        System.exit(0);
                    }
                    host = new Host(args[0], args[1], portNo);
                    Thread thread = new Thread(){
                        public void run(){
                            host.start();
                        }
                      };
                     
                      thread.start();
                }
                
            } catch (IllegalArgumentException e) {
                System.err
                        .println("usage: Host (client | server) IP [Port]");
                
            }
        
        }
             
    }
    
    
    


}
